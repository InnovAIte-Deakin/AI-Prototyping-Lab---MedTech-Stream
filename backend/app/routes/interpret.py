"""
Lab report interpretation routes.
"""
import logging
from fastapi import APIRouter, HTTPException, status
from ..models import InterpretReportRequest, InterpretReportResponse, ErrorResponse
from ..services.openai_service import openai_service

logger = logging.getLogger(__name__)
router = APIRouter()


@router.post(
    "/interpret-report",
    response_model=InterpretReportResponse,
    responses={
        400: {"model": ErrorResponse, "description": "Bad Request"},
        500: {"model": ErrorResponse, "description": "Internal Server Error"},
    }
)
async def interpret_report(request: InterpretReportRequest):
    """
    Interpret lab report using OpenAI GPT-4.
    
    This endpoint accepts structured lab test data and returns an AI-generated
    interpretation in plain language suitable for patient education.
    
    **Important**: This tool is for educational purposes only and is not a 
    substitute for professional medical advice.
    """
    try:
        logger.info(f"Received interpretation request for {len(request.tests)} tests")
        
        # Validate that we have tests to interpret
        if not request.tests:
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="No lab tests provided for interpretation"
            )
        
        # Generate interpretation using OpenAI
        interpretation = await openai_service.interpret_lab_results(
            tests=request.tests,
            patient_context=request.patient_context
        )
        
        # Add safety disclaimer to the interpretation
        safety_disclaimer = """

---

**IMPORTANT MEDICAL DISCLAIMER**: This interpretation is generated by AI for educational purposes only. It is NOT a substitute for professional medical advice, diagnosis, or treatment. Always consult with your healthcare provider about your lab results and any health concerns. If you have urgent medical concerns, contact your doctor immediately or seek emergency medical care.

This tool is designed to help you better understand your lab results and prepare questions for your healthcare provider, but it should never replace professional medical consultation."""
        
        final_interpretation = interpretation + safety_disclaimer
        
        response = InterpretReportResponse(
            interpretation=final_interpretation,
            test_count=len(request.tests)
        )
        
        logger.info("Successfully generated interpretation")
        return response
        
    except HTTPException:
        # Re-raise HTTP exceptions
        raise
    except Exception as e:
        logger.error(f"Error interpreting report: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to interpret lab report: {str(e)}"
        )


@router.post("/interpret-report/validate")
async def validate_report_data(request: InterpretReportRequest):
    """
    Validate lab report data without generating interpretation.
    
    This endpoint can be used to validate the structure and content of lab test data
    before sending it for interpretation.
    """
    try:
        logger.info(f"Validating report data with {len(request.tests)} tests")
        
        validation_results = {
            "valid": True,
            "test_count": len(request.tests),
            "tests_validated": [],
            "warnings": []
        }
        
        for i, test in enumerate(request.tests):
            test_validation = {
                "index": i,
                "name": test.name,
                "valid": True,
                "issues": []
            }
            
            # Basic validation checks
            if not test.name.strip():
                test_validation["valid"] = False
                test_validation["issues"].append("Test name is empty")
            
            if test.value < 0:
                test_validation["issues"].append("Negative test value - please verify")
            
            if not test.unit.strip():
                test_validation["valid"] = False
                test_validation["issues"].append("Unit is missing")
            
            if not test.reference_range.strip():
                test_validation["valid"] = False
                test_validation["issues"].append("Reference range is missing")
            
            validation_results["tests_validated"].append(test_validation)
            
            if not test_validation["valid"]:
                validation_results["valid"] = False
        
        # Add general warnings
        if len(request.tests) > 20:
            validation_results["warnings"].append("Large number of tests - interpretation may be lengthy")
        
        return validation_results
        
    except Exception as e:
        logger.error(f"Error validating report data: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Failed to validate report data: {str(e)}"
        )